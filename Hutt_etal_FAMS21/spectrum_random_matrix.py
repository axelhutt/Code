# -*- coding: utf-8 -*-
"""Spectrum Random Matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13eDG9xUQQuFBqzImcwirOd6xUduxb3Zg
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import special
T = 500
N=100
d=-1
dt=0.1
D=0.000
S=0.0005
beta=25
sigma_2 = 0.002/N
u = np.zeros((N,T))
v = np.zeros((N,T))
w = np.zeros((N,T))
I = np.random.normal(0, np.sqrt(S), size=N)
time=np.arange(0,T,1)


def f(u):
  output =special.erf(beta*u)#np.tanh(beta*u)# 1/(1+np.exp(-beta*u))
  return output


W=np.random.normal(0, np.sqrt(sigma_2), size=(N,N))
Jacobian = 2*W*beta/np.sqrt(np.pi)
Jacobian_noise = 2*W*beta/np.sqrt(np.pi)*1/np.sqrt(1+beta**2*S)
eigenvalues = np.linalg.eigvals(Jacobian)
eigenvalues_noise = np.linalg.eigvals(Jacobian_noise)
rad = np.sqrt(4*sigma_2*beta**2*N/np.pi)
rad_noise = np.sqrt(4*sigma_2*beta**2*N/np.pi*1/(1+beta**2*S))
X=eigenvalues.real
Y=eigenvalues.imag
X_noise=eigenvalues_noise.real
Y_noise=eigenvalues_noise.imag

print(W)

x=np.arange(-50,50,0.1)
plt.scatter(X+d,Y, color='red')
plt.scatter(X_noise+d,Y_noise, color='blue')
plt.plot(x,np.sqrt(rad**2-(x-d)**2))
plt.plot(x,-np.sqrt(rad**2-(x-d)**2))
plt.plot(x,np.sqrt(rad_noise**2-(x-d)**2))
plt.plot(x,-np.sqrt(rad_noise**2-(x-d)**2))
plt.show()
for i in range(N):
  u[i][0] = 0.01*np.random.normal(0,1)
  v[i][0] = 0.01*np.random.normal(0,1)
  w[i][0] = 0.01*np.random.normal(0,1)
perturbation=0
for t in range(T-1):
  print(t)
  if t>T/2 and t<T/2+100:
    perturbation =0
  else:
    perturbation=0

  for i in range(N):
    sum=0
    sum2=0
    for j in range(N):
      sum=sum+W[i][j]*f(u[j][t])
      sum2=sum2+W[i][j]*f(v[j][t])
    u[i][t+1] = u[i][t] +dt*(-u[i][t]+sum+I[i]+perturbation)+np.sqrt(2*D*dt)*np.random.normal(0,1)
    v[i][t+1] = v[i][t] +dt*(-v[i][t]+sum2+perturbation)
    w[i][t+1] = w[i][t]+ dt*(-w[i][t])+np.sqrt(2*D*dt)*np.random.normal(0,1)

for i in range(100):
   plt.plot(time,u[i][0:T])
plt.show()
for i in range(100):
   plt.plot(time,v[i][0:T])
plt.show()

# for i in range(100):
#    plt.plot(time,w[i][0:T])
# plt.show()
# test = u[8][:]
# numbins=50
# plt.hist(test,numbins)  
# # plt.plot(time, test)

# for i in range(50):
#    plt.hist(u[i][:],50)  
# plt.show()
# for i in range(50):
#    plt.hist(v[i][:],50)  
# plt.show()